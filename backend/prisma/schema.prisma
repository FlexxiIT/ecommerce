// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id             String    @id @default(uuid())
  email          String    @unique
  emailValidated Boolean   @default(false)
  password       String
  name           String
  surname        String
  phoneNumber    String
  Cart           Cart[]
  Order          Order[]
  Address        Address[]
}

model Address {
  id       String  @id @default(uuid())
  street   String
  city     String
  state    String
  zipCode  String
  client   Client  @relation(fields: [clientId], references: [id])
  clientId String
  Order    Order[]
}

model Category {
  id          String        @id @default(uuid())
  name        String
  SubCategory SubCategory[]
  Product     Product[]
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  Product    Product[]
}

model Product {
  id            String         @id @default(uuid())
  category      Category       @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory    @relation(fields: [subCategoryId], references: [id])
  categoryId    String
  subCategoryId String
  available     Boolean        @default(false)
  name          String
  description   String
  price         Float
  stock         Int            @default(0)
  discount      Int            @default(0)
  lowStockLimit Int            @default(0)
  timesSold     Int            @default(0)
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  ProductImage  ProductImage[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  isPrimary Boolean @default(false)

  @@index([productId])
}

model Cart {
  id       String     @id @default(uuid())
  client   Client     @relation(fields: [clientId], references: [id])
  clientId String
  items    CartItem[]
  status   CartStatus @default(ACTIVE) // Estado del carrito
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String         @id @default(uuid())
  client          Client         @relation(fields: [clientId], references: [id])
  clientId        String
  shippingAddress Address        @relation(fields: [addressId], references: [id])
  addressId       String
  items           OrderItem[]
  status          OrderStatus    @default(PENDING)
  createdAt       DateTime       @default(now())
  OrderAddress    OrderAddress[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float

  @@index([orderId])
  @@index([productId])
}

model OrderAddress {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  street    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
}

enum CartStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
